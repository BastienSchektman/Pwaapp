{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nimport { Workbox } from 'workbox-window';\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    const wb = new Workbox('/custom-sw.js');\n\n    // Écouter les événements de cycle de vie du Service Worker\n    wb.addEventListener('installed', event => {\n      if (event.isUpdate) {\n        console.log('Nouveau Service Worker installé, rafraîchissez la page pour appliquer les mises à jour.');\n      } else {\n        console.log('Service Worker installé! L\\'application fonctionne maintenant hors ligne.');\n      }\n    });\n\n    // Écouter les messages du Service Worker\n    wb.addEventListener('message', event => {\n      if (event.data.type === 'REQUEST_QUEUED') {\n        console.log(`Requête mise en file d'attente: ${event.data.url}`);\n        // Ici, vous pourriez afficher un toast pour informer l'utilisateur\n      } else if (event.data.type === 'SYNC_COMPLETED') {\n        console.log(`${event.data.count} requête(s) synchronisée(s) avec succès!`);\n        // Ici, vous pourriez afficher un toast pour informer l'utilisateur\n      } else if (event.data.type === 'monevenementcustom') {\n        console.log('Received notification data:', event.data.payload);\n        // Ici, vous pourriez afficher un toast avec les données de notification\n      }\n    });\n\n    // Enregistrer le Service Worker\n    wb.register().then(registration => {\n      console.log('Service Worker enregistré avec succès:', registration);\n\n      // Surveiller les changements de connectivité\n      window.addEventListener('online', () => {\n        console.log('Application en ligne');\n        // Informer le Service Worker que la connexion est rétablie\n        if (navigator.serviceWorker.controller) {\n          navigator.serviceWorker.controller.postMessage({\n            type: 'ONLINE_STATUS_CHANGE',\n            online: true\n          });\n        }\n      });\n      window.addEventListener('offline', () => {\n        console.log('Application hors ligne');\n        // Informer le Service Worker que la connexion est perdue\n        if (navigator.serviceWorker.controller) {\n          navigator.serviceWorker.controller.postMessage({\n            type: 'ONLINE_STATUS_CHANGE',\n            online: false\n          });\n        }\n      });\n    }).catch(error => {\n      console.error('Erreur lors de l\\'enregistrement du Service Worker:', error);\n    });\n    return wb;\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"names":["Workbox","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","wb","addEventListener","event","isUpdate","console","log","data","type","url","count","payload","then","registration","serviceWorker","controller","postMessage","online","catch","error","registerValidSW","swUrl","onupdatefound","installingWorker","installing","onstatechange","state","onUpdate","onSuccess","checkValidServiceWorker","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload"],"sources":["/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/serviceWorker.js"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nimport { Workbox } from 'workbox-window';\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    const wb = new Workbox('/custom-sw.js');\n\n    // Écouter les événements de cycle de vie du Service Worker\n    wb.addEventListener('installed', event => {\n      if (event.isUpdate) {\n        console.log('Nouveau Service Worker installé, rafraîchissez la page pour appliquer les mises à jour.');\n      } else {\n        console.log('Service Worker installé! L\\'application fonctionne maintenant hors ligne.');\n      }\n    });\n\n    // Écouter les messages du Service Worker\n    wb.addEventListener('message', event => {\n      if (event.data.type === 'REQUEST_QUEUED') {\n        console.log(`Requête mise en file d'attente: ${event.data.url}`);\n        // Ici, vous pourriez afficher un toast pour informer l'utilisateur\n      } else if (event.data.type === 'SYNC_COMPLETED') {\n        console.log(`${event.data.count} requête(s) synchronisée(s) avec succès!`);\n        // Ici, vous pourriez afficher un toast pour informer l'utilisateur\n      } else if (event.data.type === 'monevenementcustom') {\n        console.log('Received notification data:', event.data.payload);\n        // Ici, vous pourriez afficher un toast avec les données de notification\n      }\n    });\n\n    // Enregistrer le Service Worker\n    wb.register()\n      .then(registration => {\n        console.log('Service Worker enregistré avec succès:', registration);\n\n        // Surveiller les changements de connectivité\n        window.addEventListener('online', () => {\n          console.log('Application en ligne');\n          // Informer le Service Worker que la connexion est rétablie\n          if (navigator.serviceWorker.controller) {\n            navigator.serviceWorker.controller.postMessage({\n              type: 'ONLINE_STATUS_CHANGE',\n              online: true\n            });\n          }\n        });\n\n        window.addEventListener('offline', () => {\n          console.log('Application hors ligne');\n          // Informer le Service Worker que la connexion est perdue\n          if (navigator.serviceWorker.controller) {\n            navigator.serviceWorker.controller.postMessage({\n              type: 'ONLINE_STATUS_CHANGE',\n              online: false\n            });\n          }\n        });\n      })\n      .catch(error => {\n        console.error('Erreur lors de l\\'enregistrement du Service Worker:', error);\n      });\n\n    return wb;\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}