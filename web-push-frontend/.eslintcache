[{"/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/serviceWorker.js":"1","/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/components/SimpleForm.js":"2","/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/subscription.js":"3","/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/App.js":"4","/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/index.js":"5"},{"size":6042,"mtime":1745315067200,"results":"6","hashOfConfig":"7"},{"size":3288,"mtime":1745329254268,"results":"8","hashOfConfig":"7"},{"size":3975,"mtime":1745314689054,"results":"9","hashOfConfig":"7"},{"size":2099,"mtime":1745325932330,"results":"10","hashOfConfig":"7"},{"size":603,"mtime":1741945767000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1q76ijl",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/serviceWorker.js",["24","25"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nimport { Workbox } from 'workbox-window';\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    const wb = new Workbox('/custom-sw.js');\n\n    // Écouter les événements de cycle de vie du Service Worker\n    wb.addEventListener('installed', event => {\n      if (event.isUpdate) {\n        console.log('Nouveau Service Worker installé, rafraîchissez la page pour appliquer les mises à jour.');\n      } else {\n        console.log('Service Worker installé! L\\'application fonctionne maintenant hors ligne.');\n      }\n    });\n\n    // Écouter les messages du Service Worker\n    wb.addEventListener('message', event => {\n      if (event.data.type === 'REQUEST_QUEUED') {\n        console.log(`Requête mise en file d'attente: ${event.data.url}`);\n        // Ici, vous pourriez afficher un toast pour informer l'utilisateur\n      } else if (event.data.type === 'SYNC_COMPLETED') {\n        console.log(`${event.data.count} requête(s) synchronisée(s) avec succès!`);\n        // Ici, vous pourriez afficher un toast pour informer l'utilisateur\n      } else if (event.data.type === 'monevenementcustom') {\n        console.log('Received notification data:', event.data.payload);\n        // Ici, vous pourriez afficher un toast avec les données de notification\n      }\n    });\n\n    // Enregistrer le Service Worker\n    wb.register()\n      .then(registration => {\n        console.log('Service Worker enregistré avec succès:', registration);\n\n        // Surveiller les changements de connectivité\n        window.addEventListener('online', () => {\n          console.log('Application en ligne');\n          // Informer le Service Worker que la connexion est rétablie\n          if (navigator.serviceWorker.controller) {\n            navigator.serviceWorker.controller.postMessage({\n              type: 'ONLINE_STATUS_CHANGE',\n              online: true\n            });\n          }\n        });\n\n        window.addEventListener('offline', () => {\n          console.log('Application hors ligne');\n          // Informer le Service Worker que la connexion est perdue\n          if (navigator.serviceWorker.controller) {\n            navigator.serviceWorker.controller.postMessage({\n              type: 'ONLINE_STATUS_CHANGE',\n              online: false\n            });\n          }\n        });\n      })\n      .catch(error => {\n        console.error('Erreur lors de l\\'enregistrement du Service Worker:', error);\n      });\n\n    return wb;\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/components/SimpleForm.js",[],"/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/subscription.js",[],"/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/App.js",["26","27"],"import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SimpleForm from './components/SimpleForm';\nimport * as serviceWorker from './serviceWorker';\n\nfunction App() {\n  useEffect(() => {\n    // Enregistrement du service worker\n    const wb = serviceWorker.register({\n      onSuccess: () => {\n        console.log('Service Worker enregistré avec succès');\n        toast.success('Application prête pour le mode hors ligne');\n      },\n      onUpdate: () => {\n        toast.info('Mise à jour disponible. Veuillez rafraîchir.');\n      }\n    });\n\n    // Configuration des gestionnaires d'événements pour les toasts\n    if (navigator.serviceWorker.controller) {\n      navigator.serviceWorker.addEventListener('message', (event) => {\n        if (event.data && event.data.type === 'REQUEST_QUEUED') {\n          toast.info('Requête enregistrée et sera envoyée dès que possible.');\n        } else if (event.data && event.data.type === 'SYNC_COMPLETED') {\n          toast.success(`${event.data.count} requête(s) synchronisée(s) avec succès!`);\n        } else if (event.data && event.data.type === 'monevenementcustom') {\n          const notificationData = event.data.payload;\n          toast(\n            <div>\n              {notificationData.title && <div style={{ fontWeight: 'bold' }}>{notificationData.title}</div>}\n              <div>{notificationData.body}</div>\n            </div>\n          );\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <ToastContainer />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <SimpleForm />\n    </div>\n  );\n}\n\nexport default App;","/Users/bastienschektman/Downloads/reactFront&BackavecSW 2/web-push-frontend/src/index.js",[],{"ruleId":"28","severity":1,"message":"29","line":13,"column":7,"nodeType":"30","messageId":"31","endLine":13,"endColumn":18},{"ruleId":"28","severity":1,"message":"32","line":130,"column":10,"nodeType":"30","messageId":"31","endLine":130,"endColumn":33},{"ruleId":"28","severity":1,"message":"33","line":2,"column":8,"nodeType":"30","messageId":"31","endLine":2,"endColumn":12},{"ruleId":"28","severity":1,"message":"34","line":12,"column":11,"nodeType":"30","messageId":"31","endLine":12,"endColumn":13},"no-unused-vars","'isLocalhost' is assigned a value but never used.","Identifier","unusedVar","'checkValidServiceWorker' is defined but never used.","'logo' is defined but never used.","'wb' is assigned a value but never used."]